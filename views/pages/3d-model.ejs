<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Модель - ТРЦ "Кристалл"</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
</head>
<body>
    <%- include('../partials/header') %>

    <div class="model-page">
        <div class="container">
            <div class="page-header">
                <h1 class="page-title">3D Модель торгового центра</h1>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Главная</a></li>
                        <li class="breadcrumb-item active">3D Модель</li>
                    </ol>
                </nav>
            </div>

            <div class="model-container">
                <div id="model-viewer"></div>
                
                <div class="model-controls">
                    <div class="control-group">
                        <button class="btn btn-outline" id="resetCamera">
                            <i class="bi bi-arrow-counterclockwise"></i>
                            Сбросить камеру
                        </button>
                        <button class="btn btn-outline" id="toggleWireframe">
                            <i class="bi bi-grid-3x3"></i>
                            Каркасный режим
                        </button>
                    </div>
                    
                    <div class="floor-controls">
                        <h3>Этажи</h3>
                        <div class="btn-group">
                            <button class="btn btn-outline active" data-floor="1">1 этаж</button>
                            <button class="btn btn-outline" data-floor="2">2 этаж</button>
                            <button class="btn btn-outline" data-floor="3">3 этаж</button>
                        </div>
                    </div>
                </div>
                
                <div class="model-info">
                    <div class="info-card">
                        <h3>Управление</h3>
                        <ul>
                            <li>Вращение: Левая кнопка мыши</li>
                            <li>Перемещение: Правая кнопка мыши</li>
                            <li>Масштабирование: Колесико мыши</li>
                        </ul>
                    </div>
                    
                    <div class="info-card">
                        <h3>Информация</h3>
                        <ul>
                            <li>Общая площадь: 150,000 м²</li>
                            <li>Этажность: 3 этажа</li>
                            <li>Парковка: 500 мест</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
    .model-page {
        padding: 2rem 0;
        min-height: calc(100vh - 60px);
    }

    .model-container {
        margin-top: 2rem;
        display: grid;
        grid-template-columns: 1fr 300px;
        gap: 2rem;
    }

    #model-viewer {
        aspect-ratio: 16/9;
        background: var(--surface-secondary);
        border-radius: 1rem;
        overflow: hidden;
    }

    .model-controls {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .control-group {
        display: flex;
        gap: 1rem;
    }

    .floor-controls {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 1rem;
    }

    .floor-controls h3 {
        margin-bottom: 1rem;
    }

    .btn-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .model-info {
        grid-column: 1 / -1;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
    }

    .info-card {
        background: var(--surface-color);
        padding: 1.5rem;
        border-radius: 1rem;
    }

    .info-card h3 {
        margin-bottom: 1rem;
        color: var(--text-color);
    }

    .info-card ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .info-card li {
        padding: 0.5rem 0;
        border-bottom: 1px solid var(--border-color);
        color: var(--text-secondary);
    }

    .info-card li:last-child {
        border-bottom: none;
    }

    @media (max-width: 768px) {
        .model-container {
            grid-template-columns: 1fr;
        }
    }
    </style>

    <script>
    let camera, scene, renderer, controls;
    let model;
    let isWireframe = false;

    function init() {
        // Создаем сцену
        scene = new THREE.Scene();
        scene.background = new THREE.Color(0xf5f5f5);

        // Настраиваем камеру
        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.set(5, 5, 5);

        // Создаем рендерер
        renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(document.getElementById('model-viewer').offsetWidth, document.getElementById('model-viewer').offsetHeight);
        document.getElementById('model-viewer').appendChild(renderer.domElement);

        // Добавляем освещение
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        scene.add(ambientLight);

        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
        directionalLight.position.set(10, 10, 10);
        scene.add(directionalLight);

        // Добавляем управление орбитой
        controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;

        // Загружаем модель
        const loader = new THREE.GLTFLoader();
        loader.load('/models/mall.glb', function(gltf) {
            model = gltf.scene;
            scene.add(model);
            
            // Центрируем камеру на модели
            const box = new THREE.Box3().setFromObject(model);
            const center = box.getCenter(new THREE.Vector3());
            controls.target.copy(center);
            
            // Настраиваем начальное положение камеры
            const size = box.getSize(new THREE.Vector3());
            const maxDim = Math.max(size.x, size.y, size.z);
            const fov = camera.fov * (Math.PI / 180);
            const cameraZ = Math.abs(maxDim / Math.sin(fov / 2));
            camera.position.z = cameraZ;
            
            camera.updateProjectionMatrix();
        });

        // Обработчики событий
        window.addEventListener('resize', onWindowResize, false);
        
        document.getElementById('resetCamera').addEventListener('click', resetCamera);
        document.getElementById('toggleWireframe').addEventListener('click', toggleWireframe);
        
        document.querySelectorAll('[data-floor]').forEach(button => {
            button.addEventListener('click', (e) => {
                const floor = e.target.dataset.floor;
                showFloor(floor);
                
                // Обновляем активную кнопку
                document.querySelectorAll('[data-floor]').forEach(btn => {
                    btn.classList.remove('active');
                });
                e.target.classList.add('active');
            });
        });
    }

    function animate() {
        requestAnimationFrame(animate);
        controls.update();
        renderer.render(scene, camera);
    }

    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(document.getElementById('model-viewer').offsetWidth, document.getElementById('model-viewer').offsetHeight);
    }

    function resetCamera() {
        if (model) {
            const box = new THREE.Box3().setFromObject(model);
            const center = box.getCenter(new THREE.Vector3());
            controls.target.copy(center);
            
            const size = box.getSize(new THREE.Vector3());
            const maxDim = Math.max(size.x, size.y, size.z);
            const fov = camera.fov * (Math.PI / 180);
            const cameraZ = Math.abs(maxDim / Math.sin(fov / 2));
            
            camera.position.set(cameraZ, cameraZ, cameraZ);
            camera.lookAt(center);
            controls.update();
        }
    }

    function toggleWireframe() {
        if (model) {
            isWireframe = !isWireframe;
            model.traverse((child) => {
                if (child.isMesh) {
                    child.material.wireframe = isWireframe;
                }
            });
        }
    }

    function showFloor(floor) {
        if (model) {
            model.traverse((child) => {
                if (child.isMesh && child.userData.floor) {
                    child.visible = child.userData.floor === floor;
                }
            });
        }
    }

    init();
    animate();
    </script>

    <%- include('../partials/footer') %>
</body>
</html> 